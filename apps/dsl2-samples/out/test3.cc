/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/

struct _arec_event {volatile int _state;};
#define NULL ((void *)0UL)
struct _arec__test3_acq;
typedef void (*_t__test3_acq) (struct _arec__test3_acq* _this, float*  _ret0);
struct _arec__test3_acq{
    int _state = 0;
    float test3_acq_y;
    int test3_acq_x;
};
struct _arec__test3_irq;
typedef void (*_t__test3_irq) ();
struct _arec__test3_main;
typedef void (*_t__test3_main) (struct _arec__test3_main* _this, void*  _ret0);
struct _arec__test3_main{
    int _state = 0;
    float test3_main_res;
    struct _arec__test3_acq _arec__test3_acq;
};
/*Module vars for test3*/
struct _arec_event*  test3_dma;
/*End of module vars for test3*/
int _test3_acq(struct _arec__test3_acq* _this, float*  _ret0)
{
static const void * _atbl[] = { &&lstate_0, &&lstate_1, &&lstate_2 };
int _state = _this->_state;
_this->_state = 0;
if (_state > 0 && _state <= 2) goto *(_atbl[_state]);
 lstate_0:
{
    _this->test3_acq_x=(_this->test3_acq_y*2);
    test3_dma->_state = 1;
 lstate_1:
    _state = test3_dma->_state;
    if (_state > 0) {_this->_state = 1; return _this->_state;} 
 lstate_2:
    if (_ret0 == NULL){
        _this->_state = 2;
    }
    else{
        *(_ret0) = _this->test3_acq_x;
    }
    return _this->_state; 
}
return _this->_state;
}
void _test3_irq()
{
    {
        test3_dma->_state = 0;
    }
}
int _test3_main(struct _arec__test3_main* _this)
{
static const void * _atbl[] = { &&lstate_0, &&lstate_1 };
int _state = _this->_state;
_this->_state = 0;
if (_state > 0 && _state <= 1) goto *(_atbl[_state]);
 lstate_0:
{
    _this->_arec__test3_acq._state = 0;
    _this->_arec__test3_acq.test3_acq_y = 3;
 lstate_1:
    _state = _test3_acq( &(_this->_arec__test3_acq), &(_this->test3_main_res)) ;
    if (_state > 0) {_this->_state = 1; return _this->_state;} 
}
return _this->_state;
}