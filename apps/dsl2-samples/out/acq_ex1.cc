/********************************************************************************
This code is automatically generated by the VerticalThings compiler. DO NOT EDIT!
********************************************************************************/

struct _arec_event {volatile int _state;};
#define NULL ((void *)0UL)
#include "../inc/vtdefs.h"
#include "../inc/stm32_hal_ex1.h"
struct _arec__acq_ex1_acq;
typedef void (*_t__acq_ex1_acq) (struct _arec__acq_ex1_acq* _this, uint8_t _ret0[128]);
struct _arec__acq_ex1_acq{
    int _state = 0;
};
struct _arec__acq_ex1_HAL_SPI_TxRxCpltCallback;
typedef void (*_t__acq_ex1_HAL_SPI_TxRxCpltCallback) (SPI_HandleRef acq_ex1_HAL_SPI_TxRxCpltCallback_href);
struct _arec__acq_ex1_process;
typedef void (*_t__acq_ex1_process) (uint8_t acq_ex1_process_buf[128]);
struct _arec__acq_ex1_main;
typedef void (*_t__acq_ex1_main) (struct _arec__acq_ex1_main* _this, void*  _ret0);
struct _arec__acq_ex1_main{
    int _state = 0;
    uint8_ref_t acq_ex1_main_buf;
    struct _arec__acq_ex1_acq _arec__acq_ex1_acq;
};
/*Module vars for acq_ex1*/
struct _arec_event*  acq_ex1_spi_dma_done;
struct _arec__acq_ex1_acq*  acq_ex1_facq;
const int acq_ex1_BUFFERSIZE=128;
uint8_t acq_ex1_flip_bufs[2][128];
uint16_t acq_ex1_curr_buf=0;
/*End of module vars for acq_ex1*/
int _acq_ex1_acq(struct _arec__acq_ex1_acq* _this, uint8_t(*_ret0)[128])
{
static const void * _atbl[] = { &&lstate_0, &&lstate_1, &&lstate_2, &&lstate_3 };
int _state = _this->_state;
_this->_state = 0;
if (_state > 0 && _state <= 3) goto *(_atbl[_state]);
 lstate_0:
{
    acq_ex1_curr_buf=(acq_ex1_curr_buf^1);
    if((HAL_SPI_TransmitReceive_DMA(&(SpiHandle), NULL, acq_ex1_flip_bufs[acq_ex1_curr_buf], acq_ex1_BUFFERSIZE) !=HAL_OK))
    {
        Error_Handler() ;
 lstate_1:
        if (_ret0 == NULL){
            _this->_state = 1;
        }
        else{
            *(_ret0) = NULL;
        }
        return _this->_state; 
    }
    acq_ex1_spi_dma_done->_state = 1;
 lstate_2:
    _state = acq_ex1_spi_dma_done->_state;
    if (_state > 0) {_this->_state = 2; return _this->_state;} 
 lstate_3:
    if (_ret0 == NULL){
        _this->_state = 3;
    }
    else{
        *(_ret0) = acq_ex1_flip_bufs[acq_ex1_curr_buf];
    }
    return _this->_state; 
}
return _this->_state;
}
void _acq_ex1_HAL_SPI_TxRxCpltCallback(SPI_HandleRef acq_ex1_HAL_SPI_TxRxCpltCallback_href)
{
    {
        acq_ex1_spi_dma_done->_state = 0;
    }
}
void _acq_ex1_process(uint8_t acq_ex1_process_buf[128])
{
    {
    }
}
int _acq_ex1_main(struct _arec__acq_ex1_main* _this)
{
static const void * _atbl[] = { &&lstate_0, &&lstate_1 };
int _state = _this->_state;
_this->_state = 0;
if (_state > 0 && _state <= 1) goto *(_atbl[_state]);
 lstate_0:
{
    _this->_arec__acq_ex1_acq._state = 0;
    _acq_ex1_acq( &(_this->_arec__acq_ex1_acq), ((uint8_t[128]*) 0UL)) ;
    acq_ex1_facq= &(_this->_arec__acq_ex1_acq);
    while(1)
    {
 lstate_1:
        _state = _acq_ex1_acq(acq_ex1_facq, (&_this->acq_ex1_main_buf) );
        if (_state > 0) {_this->_state = 1; return _this->_state;} 
        _this->_arec__acq_ex1_acq._state = 0;
        _acq_ex1_acq( &(_this->_arec__acq_ex1_acq), ((uint8_t[128]*) 0UL)) ;
        acq_ex1_facq= &(_this->_arec__acq_ex1_acq);
        _acq_ex1_process(_this->acq_ex1_main_buf) ;
    }
}
return _this->_state;
}